> install.packages("swirl")
install.packages("swirl")
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
?sample
example("sample")
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = True,prob = c(.3,.7))
sample(c(0,1),100,replace = TRUE,prob = c(.3,.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(.3,.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = .7)
rbinom(100,size = 1,prob = .7)
flips2 <- rbinom(100,size = 1,prob = .7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100,sd = 25)
?rpois()
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
?unclass
example(unclass)
example("unclass")
d1
d2 <- as.data("1969-01-01")
d2 <- as.date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.Date()
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3,"%B %d,%Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time()-t1
difftime(Sys.time(),t1,units = 'days')
data(cars)
?cars
head(cars)
dim(cars)
names(cars)
summary(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed,
| cars)
plot(dist ~ speed,cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist,"Speed")
plot(x = cars$speed, y = cars$dist,xxlab = "Speed")
plot(x = cars$speed, y = cars$dist,xlab = "Speed")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(cars,title(main = "My Plot"))
plot(cars,main = "My Plot")
plot(cars,sub = "My Plot Subtitle"))
plot(cars,sub = "My Plot Subtitle")
?par
plot(cars,col(red))
plot(cars,par()
)
?par
plot(cars, col)
plot(cars, col =2 )
plot(cars, xlim = c(10,15))
?points
plot(cars,pch = 24)
plot(cars,pch = 2)
data(mtcars)
?boxplot
play()
mtcars
summary(mtcars)
?mtcars
nxt()
?boxplot
boxplot(data = mtcars,formula = mpg ~ cyl)
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
install.packages("rmarkdown")
install.packages("devtools")
title: "Test"
runtime: shiny
install.packages("leaflet")
install.packages("plotly")
install.packages("moments")
install.packages("plotly")
d <- diamonds[sample(nrow(diamonds), 1000), ]
data(diamonds)
library(ggplot2)
data(diamonds)
library(moments)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(plotly)
str(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),mode = "markers", color = carat, size = carat)
(gg <- ggplotly(p))
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 2) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 1) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 2) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 1.5) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
d <- diamonds[sample(nrow(diamonds), 10000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 1.5) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),mode = "markers", color = carat, size = carat)
df <- read.csv("Data/refine_original.csv", sep = ",", header = TRUE)
df$company <- as.character(df$company)
df$company <- tolower(df$company)
df$Product.code...number <- as.character(df$Product.code...number)
df$address <- as.character(df$address)
df$city <- as.character(df$city)
df$country <- as.character(df$country)
df$name <- as.character(df$name)
setwd("C:/Users/jmorken/Documents/GitHub/Data Wrangling Projects/Basic Springboard Data Manipulation Exercise")
df <- read.csv("Data/refine_original.csv", sep = ",", header = TRUE)
df$company <- as.character(df$company)
df$company <- tolower(df$company)
df$Product.code...number <- as.character(df$Product.code...number)
df$address <- as.character(df$address)
df$city <- as.character(df$city)
df$country <- as.character(df$country)
df$name <- as.character(df$name)
# Load the libraries
library(dplyr)
library(tidyr)
#Add Company Key
companies <- c("philips", "akzo", "van houten","unilever")
companies <- as.data.frame(companies)
companies$companies <- as.character(companies$companies)
#install.packages(stringdist)
library(stringdist)
# Map messy company character strings to standard versions.
d <- expand.grid(unique(df$company),companies$companies, KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE) # Create long form of original vs. key
names(d) <- c("company","b_name")  # Name the columns
d$dist <- stringdist(d$company,d$b_name, method="jw")  # Calculate fit
d <-do.call(rbind, unname(by(d, d$company, function(x) x[x$dist == min(x$dist),])))  # Reduce to best fit
# Join created data frame with original, re-map company and get rid of b_name column.
df <- left_join(df, d, by = "company")
df$company <- df$b_name
df <- df[,c(1:6)]
df <- df %>%
separate(Product.code...number, c("product_code", "product_number"), sep = "\\-")
product_codes <- data.frame(product_code = c("p", "v", "x","q"), product_category = c("Smartphone","TV","Laptop","Tablet"))
df <- left_join(df,product_codes)
df <- unite(df, full_address, address, city, country, sep = ",", remove = FALSE)
?tidyr
?spread
df2 <- spread(df, company, yesno)
df2 <- spread(df, company)
df2 <- spread(df, company, company)
View(df2)
View(df)
df2 <- df %>%
mutate(yesno = 1) %>%
distinct %>%
spread(company, yesno, fill = 0)
df2 <- df2 %>%
mutate(yesno = 1) %>%
distinct %>%
spread(product_category, yesno, fill = 0)
View(df2)
?rename
colnames(df2[,c(8:11)]) <- paste("company", colnames(df2[,c(8:11)]), sep = "_")
View(df2)
df2
paste("company", colnames(df2[,c(8:11)]), sep = "_")
colnames(df2[,c(8:11)]) <- paste("company", colnames(df2[,c(8:11)]), sep = "_")
df2[,c(8:11)] <- paste("company", colnames(df2[,c(8:11)]), sep = "_")
View(df2)
paste("company", colnames(df2[,c(8:11)]), sep = "_")
df2[,c(8:11)] <- paste("company", colnames(df2[,c(8:11)]), sep = "_")
View(df2)
df2 <- df %>%
mutate(yesno = 1) %>%
distinct %>%
spread(company, yesno, fill = 0)
df2 <- df2 %>%
mutate(yesno = 1) %>%
distinct %>%
spread(product_category, yesno, fill = 0)
colnames(df2[,c(8:11)]) <- paste("company", colnames(df2[,c(8:11)]), sep = "_")
View(df2)
df2 <- df %>%
mutate(company = paste("company", company, sep = "_"),yesno = 1) %>%
distinct %>%
spread(company, yesno, fill = 0)
View(df2)
df2 <- df2 %>%
mutate(product_category = paste("product", product_category, sep = "_"), yesno = 1) %>%
distinct %>%
spread(product_category, yesno, fill = 0)
View(df2)
setwd("C:/Users/jmorken/Documents/GitHub/Data Wrangling Projects/Basic Springboard Data Manipulation Exercise")
df <- read.csv("Data/refine_original.csv", sep = ",", header = TRUE)
df$company <- as.character(df$company)
df$company <- tolower(df$company)
df$Product.code...number <- as.character(df$Product.code...number)
df$address <- as.character(df$address)
df$city <- as.character(df$city)
df$country <- as.character(df$country)
df$name <- as.character(df$name)
# Load the libraries
library(dplyr)
library(tidyr)
#Add Company Key
companies <- c("philips", "akzo", "van houten","unilever")
companies <- as.data.frame(companies)
companies$companies <- as.character(companies$companies)
#install.packages(stringdist)
library(stringdist)
# Map messy company character strings to standard versions.
d <- expand.grid(unique(df$company),companies$companies, KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE) # Create long form of original vs. key
names(d) <- c("company","b_name")  # Name the columns
d$dist <- stringdist(d$company,d$b_name, method="jw")  # Calculate fit
d <-do.call(rbind, unname(by(d, d$company, function(x) x[x$dist == min(x$dist),])))  # Reduce to best fit
# Join created data frame with original, re-map company and get rid of b_name column.
df <- left_join(df, d, by = "company")
df$company <- df$b_name
df <- df[,c(1:6)]
df <- df %>%
separate(Product.code...number, c("product_code", "product_number"), sep = "\\-")
product_codes <- data.frame(product_code = c("p", "v", "x","q"), product_category = c("Smartphone","TV","Laptop","Tablet"))
df <- left_join(df,product_codes)
df <- unite(df, full_address, address, city, country, sep = ",", remove = FALSE)
#company variables
df <- df %>%
mutate(company = paste("company", company, sep = "_"), yesno = 1) %>%
distinct %>%
spread(company, yesno, fill = 0)
#category variables
df <- df %>%
mutate(product_category = paste("product", product_category, sep = "_"), yesno = 1) %>%
distinct %>%
spread(product_category, yesno, fill = 0)
write.csv(df, file = "data\refine_clean.csv")
?write.csv
write.csv(df, file = "data\refine_clean.csv", sep = ",")
write.csv(df, file = "data\refine_clean.csv", sep = ",", row.names = FALSE)
write.csv(df, file = "data/refine_clean.csv", sep = ",")
write.csv(df, file = "data/refine_clean.csv")
write.csv(df, file = "data/refine_clean.csv",row.names = FALSE)
